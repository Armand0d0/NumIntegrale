#include <iostream>
#include <stdio.h>
#include "Utils.hpp"
#include "Cuda.cuh"
#include <cmath>
using namespace std;

#define uchar unsigned char

void showArr(float* f,int l){
for(int i=0;i<l;i++){
			//cout<< "i="<<i<<"  "<<f[i]<<endl;
            cout<</*"<"<<i<<">" <<*/ f[i]<<"   ";
            if(i%10==0)cout<<endl;
		}
    cout<<endl<<endl;
}
float getRandom(float f1,float f2){
    float r = static_cast <float> (rand()) / static_cast <float> (RAND_MAX);
    r*=(f2-f1);
    r+=f1;
    return r;
}
float* getRandomArr(float a,float b,int m){
 float* fillArr= (float*)malloc(sizeof(float)*m);
for(int i=0;i<m;i++){
    fillArr[i] =getRandom(a,b);
}
return fillArr;
}
float* emptyArr(int l){
    float* f= (float*)malloc(sizeof(float)*l);
    for(int i=0;i<l;i++){
        f[i] = 0;
    }
    return f;
}
float* computeLayer(float* in,int l0,int l1, const char* weightsFile, const char* biasFile ){
    Utils utils{};
    Cuda cuda{};
    int w_nb = l0*l1;
    float* weights =utils.ReadFileToFoats(weightsFile,w_nb);
Cuda::Matrix w1;   w1.arr = weights;  w1.w = l0; w1.h = l1; 
Cuda::Matrix a0;   a0.arr = in;        a0.w = 1;        a0.h = l0;
float* a1 = cuda.MatrixVectorMul(w1,a0);   
float* bias = utils.ReadFileToFoats(biasFile,l1);
float* a1b = cuda.VecSum(bias,a1, l1); 
float* a1Relu = cuda.Relu(a1b,l1);
cuda.clean(a1);
cuda.clean(a1b);
free(bias);
free(weights);
    return a1Relu;
}
float* computeLastLayer(float* in,int l0,int l1, const char* weightsFile, const char* biasFile ){
    Utils utils{};
    Cuda cuda{};
    int w_nb = l0*l1;
    float* weights =utils.ReadFileToFoats(weightsFile,w_nb);
Cuda::Matrix w1;   w1.arr = weights;  w1.w = l0; w1.h = l1; 
Cuda::Matrix a0;   a0.arr = in;        a0.w = 1;        a0.h = l0;
float* a1 = cuda.MatrixVectorMul(w1,a0);   
float* bias = utils.ReadFileToFoats(biasFile,l1);
float* a1b = cuda.VecSum(bias,a1, l1); 
//showArr(a1b,l1);
float* a1Sm = cuda.SoftMax(a1b,l1);
cuda.clean(a1);
cuda.clean(a1b);
free(bias);
free(weights);
    return a1Sm;
}
float* computeNN(unsigned char** dataset,int img_size,int imgIdx){
Cuda cuda{};
int l2 = 32;
int l3 = 16;
int l4 = 16;
int l5 = 10;
        float* in = cuda.normalize(dataset[imgIdx]);
float* a1 = computeLayer(in,img_size,l2,"weights1.txt","bias1.txt");
float* a2 = computeLayer(a1,l2,l3,"weights2.txt","bias2.txt");
float* a3 = computeLayer(a2,l3,l4,"weights3.txt","bias3.txt");
float* a4 = computeLastLayer(a3,l4,l5,"weights4.txt","bias4.txt");
//float* a5 = computeLayer(a3,l4,l5,"weights4.txt","bias4.txt");
// showArr(a4,l5);
//showArr(a5,l5);

//cuda.clean(a5);
//cuda.clean(a4);
cuda.clean(a3);
cuda.clean(a2);
cuda.clean(a1);
cuda.clean(in);
return a4;
}
float getCostOn(float* out,int N,int label){
float c =0;
    for(int i=0;i<N;i++){
        float a=0;
        if(label == i){ a=1;} else {a = 0;}//a is the good answer
            c+=pow(out[i]-a,2);
    }
return c;
}
float** computeNNActivations(uchar* input,int img_size){
Cuda cuda{};
int l2 = 32;
int l3 = 16;
int l4 = 16;
int l5 = 10;

        float* in = cuda.normalize(input); //showArr(in,img_size);
    float** a = (float**)malloc(    sizeof(float)*(l2+l3+l4+l5)      );
 a[0] = computeLayer(in,img_size,l2,"weights1.txt","bias1.txt");
 a[1] = computeLayer(a[0],l2,l3,"weights2.txt","bias2.txt");
 a[2] = computeLayer(a[1],l3,l4,"weights3.txt","bias3.txt");
 a[3] = computeLastLayer(a[2],l4,l5,"weights4.txt","bias4.txt");

//showArr(a[3],l5);

cuda.clean(in);
return a;
}
float* getLabelToArr(float l,int n){
    float* r = (float*)malloc(sizeof(float)*n);
    for(int i=0;i<n;i++){
        float a=0;
        if(l == i){ a=1;} else {a = 0;}//a is the good answer
        r[i]= a;
    }
    return r;
}
float getLength(float* f,int N){
    Cuda cuda{};
        float* r = (float*)malloc(sizeof(float)*N);
        r = cuda.Square(f,N);
        float s = cuda.SumArr(r,N)+0.002;
    if(s != s) cout<<"FAILLLLLLLLLLLLLLLLLLLLLLLLLL:"<<s<<endl;
        cuda.clean(r);
        return sqrt(s);
}
float* normalizef(float* f,float f1, int N){
    Cuda cuda{};
        float* a = (float*)malloc(sizeof(float)*N);
        float l = getLength(f,N);
   
        a = cuda.VectorScalarMul(f,f1/l,N);
        
    return a;
}

void trainModel(uchar** dataset,uchar* labels,int img_size,float factor,int iter, int imgIdx){
    Cuda cuda{};
    Utils utils{};
    int l2 = 32, l3 = 16, l4 = 16, l5 = 10,outSize = l5;
    int lc=4;
    int wCnt = l4*l5;
float* weights4 =utils.ReadFileToFoats("weights4.txt",wCnt);
Cuda::Matrix w4;   w4.arr = weights4;  w4.w = l4; w4.h = l5; 
float* bias4 = utils.ReadFileToFoats("bias4.txt",l5);
    float* WNG_mean = emptyArr(wCnt);

    //    int iter=1000;
    for(int i=0;i<iter;i++){
        float** a = computeNNActivations(dataset[imgIdx+i],img_size);
        float* l = getLabelToArr(labels[imgIdx+i],outSize);
        Cuda::Matrix a3;
        a3.arr = a[2]; a3.h = l4;   a3.w = 1;
        float* z1 = cuda.MatrixVectorMul(w4,a3);
        float* z = cuda.VecSum(z1,bias4,l5);
        showArr(a[3],l5);
        float* WNG = cuda.computeLastLayerWeightsNegGradient(z,a[2],bias4,l,l4,l5);
        float* WNG2 = cuda.computeLastLayerWeightsNegGradient2(z,a[2],bias4,l,l4,l5);
        //float length = getLength(WNG,wCnt);
        //WNG = normalizef(WNG,1,wCnt);
        //WNG = cuda.VecMul(WNG,WNG2,wCnt);
        //WNG = cuda.VectorScalarMul(WNG,-1/length*length,wCnt);
       WNG_mean = cuda.VecSum(WNG_mean,WNG,wCnt);
        //showArr(WNG,wCnt);
        cuda.clean(WNG2);
        cuda.clean(WNG);
        cuda.clean(z);
        cuda.clean(z1);
        free(l);
        cuda.clean(a,lc);
    }
    WNG_mean = cuda.VectorScalarMul(WNG_mean,factor/((float)iter),wCnt);
    //showArr(WNG_mean,wCnt);
    float* toWriteWeights  = cuda.VecSum(weights4,WNG_mean,wCnt);
    utils.WriteFloatsToFile("weights4.txt",toWriteWeights,wCnt);
    //free(WNG_mean);
   cuda.clean(WNG_mean);
    free(bias4);
    free(weights4);
}
float testModelCost(uchar** dataset,uchar* labels,int inputSize,int outSize,int iter,int imgIdx){
    Cuda cuda{};
float avgCost = 0;
for(int i=0;i<iter;i++){

float* rightOut =(float*)malloc(sizeof(float)*outSize);
float* out = computeNN(dataset,inputSize,imgIdx+i); 
float cost = getCostOn(out,outSize,(int)labels[imgIdx+i]) ;
//cout<< " cost=" << cost<< endl;
avgCost+=cost;
cuda.clean(out);
}
avgCost/=(float)iter;
cout<<"avgCost="<<avgCost<<endl;
return avgCost;
}
int main(){
cout<< "main start"<<endl;
srand (static_cast <unsigned> (time(0)));
    Utils utils{};
    Cuda cuda{};
    string path = "/home/armand/..dev/datasets/MNIST/train-images-idx3-ubyte";
    string lpath = "/home/armand/..dev/datasets/MNIST/train-labels-idx1-ubyte";
    int img_nb = 200,l_nb = 200,img_size = 784;
    uchar** dataset = utils.read_mnist_images(path,img_nb,img_size);
    uchar* labels = utils.read_mnist_labels(lpath,l_nb);
    int outSize = 10;

    int m = 160;
        
    //utils.WriteFloatsToFile("weights4.txt",getRandomArr(-1,1,m),m);
    int imgCount = 1;
    float factor = -100;
    int iter = 100;
    float initAvgCost = testModelCost(dataset,labels,img_size,outSize,imgCount,0);
    float prevAvgCost = initAvgCost;
    float counter =0;
        for(int i =0;i<iter;i++){
            trainModel(dataset,labels,img_size,factor,imgCount,0);
            float avgCost = testModelCost(dataset,labels,img_size,outSize,imgCount,0);
            if(avgCost>prevAvgCost){factor*=-0.5;cout<<"new factor = "<<factor<<endl;}
            if(prevAvgCost-avgCost<0.000000001){counter++;}else{counter =0;}
            if(counter>4){factor*=2;/*cout<<"model progression too slow"<<endl;break;*/}
            prevAvgCost = avgCost;
        }   
        cout<<"cost progression = "<<initAvgCost-prevAvgCost<<endl;//0.002117; 0.009132; 0.028077 0.006.. 0.008.. 
        cout<<endl;

    // best : over 100: avgCost=0.883079
    //over 10 : 0.83...
    //over 1 : 0.58..
    free(dataset);
    free(labels);
 
    cout<<endl;
    return 0;
}
/*

float acc =0;
float* f = cuda.normalize(dataset[8]);
for(int i=0;i<img_size;i++){
    acc+=f[i];
}
float s =cuda.SumArr(f,img_size);
cout<<"acc="<<acc<<"    s=" << s << endl;


for(int j=0;j<100;j++){
    uchar* img = dataset[j];
    cout<< (int)labels[j]<<endl;
for(int i=0;i<img_size;i++){
    int r = (int)(img[i]);
    cout<< r;
    if(r<10)cout<<"   ";
    else if((r<100))cout<<"  ";
    else cout<<" ";
    if(i%28==0)cout<<endl;
}
cout<<endl<<endl<<endl;
}
cout<<endl<<endl<<endl;//*/

   